=================================================================================
HELM SECRETS MANAGEMENT USING HELM-SECRETS PLUGIN AND SOPS (Secrets OPerationS)
==================================================================================

ABOUT SOPS:
    - SOPS is an editor of encrypted files that supports YAML, JSON, ENV, INI and BINARY formats and
      encrypts with AWS KMS, GCP KMS, Azure Key Vault, age, and PGP
    - https://github.com/getsops/sops


ABOUT HELM-SECRETS PLUGIN:
  - helm-secrets is a Helm plugin for decrypting encrypted Helm value files on the fly, using SOPS
  - https://github.com/jkroepke/helm-secrets


PROBLEM: 
- We need to pass in secrets/credentials/sensitive values to be used in Helm Charts 
- The secret data cannot be added raw into values files, as the values files wil be stored in Git


SOLUTION:
- A combination of helm-secrets plugin + sops will be used to encrypt the values files that contain sensitive data
- The encrypted values files can be stored in Git
- During deployment of helm charts, helm-plugin + sops will be used to decrypt the encrypted values files and the original
  raw values will made available to the helm chart.


REFERENCE:
    - https://fenyuk.medium.com/helm-for-kubernetes-handling-secrets-with-sops-d8149df6eda4
    - https://fenyuk.medium.com/helm-for-kubernetes-handling-secrets-with-helm-secrets-plugin-4e31f6f3e306
    - https://www.youtube.com/watch?v=hRSlKRvYe1A
    - https://www.youtube.com/watch?v=1pXMT7dN-n4


==========
EXAMPLE
==========

Pre-Reqs
-----------
- We will use SOPS + AGE (https://github.com/FiloSottile/age) as our encryption tool. 
  Age is a simple, modern and secure file encryption tool (and Go library) with small explicit keys, no config options, 
  and UNIX-style composability.

- Install helm-secretes plugin, SOPS and age using brew.


Create encryption keys using age 
-----------------------------------
>> age-keygen -o key.txt

>> mkdir -p ~/.config/sops/age

>> cp -p key.txt ~/.config/sops/age/keys.txt

>> export SOPS_AGE_KEY_FILE=~/.config/sops/age/keys.txt


Using ".sops.yaml" conf to define the encryption scheme for a repo
---------------------------------------------------------------------
 - If your secrets are stored under a specific directory, like a git repository, you can create a .sops.yaml configuration file at 
   the root directory to define which keys are used for which filename.

- We will create a simple .sops.yaml as follows:

# copy public key from key.txt age17mn84gj495r8a3dnsuh3zxctcyw884seldp8jtg7n7ywve8pzgcs9ucscg
----
creation_rules:
  -  age: age17mn84gj495r8a3dnsuh3zxctcyw884seldp8jtg7n7ywve8pzgcs9ucscg
----


Encrypting helm sensitive values
------------------------------------
- We have three Helm charts:
    - RabbitMQ, maintained by Bitnami
    - a hand-crafted chart with naive REST API server communicating with RabbitMQ
    - a chart to create a TLS secret

- All the charts are using insecure credentials:
    - charts/rabbitmq/secrets/credentials.yaml
        - the values in this file are referenced in charts/rabbitmq/templates/my-secrets.yaml
    
    - charts/serverhb/secrets/credentials.yaml
        - the values in this file are referenced in charts/serverhb/templates/my-secrets.yaml
    
    - charts/tlscert/secrets/keys.yaml
        - he values in this file are referenced in charts/tlscert/templates/secrets.yaml


- Encrypt the insecure values files:
>> helm secrets encrypt charts/rabbitmq/secrets/credentials.yaml > charts/rabbitmq/secrets/credentials.encrypted.yaml

>> helm secrets encrypt charts/serverhb/secrets/credentials.yaml > charts/serverhb/secrets/credentials.encrypted.yaml

>> helm secrets encrypt charts/tlscert/secrets/keys.yaml > charts/tlscert/secrets/keys.encrypted.yaml

NOTE: after running the above commands, delete the original, insecure, values files. 


Examining the encrypted values files
---------------------------------------
- charts/rabbitmq/secrets/credentials.encrypted.yaml
====
rabbitmq_password: ENC[AES256_GCM,data:IMhkCPVKfd+SRS0oL9pLoQKjFCi5,iv:67KcdObqbIx9D366MmIB6XqlObDMEf5dKuZ6lW6dozg=,tag:wIhSiX1WY5OAQY0yu1G9Fg==,type:str]
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age:
        - recipient: age17mn84gj495r8a3dnsuh3zxctcyw884seldp8jtg7n7ywve8pzgcs9ucscg
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBNa0xmcW5NT3I4c1d4SDF1
            cjRRdVU1UEdsNXNwSWhlSFZDeW9yOWdOT3lvCjZnMzJ4bklOczBpayttTm00STBo
            NHQ3dVg3NjVkaVZTaTQ1cVdYbUlMaEEKLS0tIHRHYWw2cmxEVDNPQkhML01lMUdQ
            VU92N0luYUZmR1doQnowVFY2OFFvN0UKSmDpvG2cclJbPWnjek3Tw5Xnr+ghdrip
            UHEZj+Xg0c524QeNJOYCQgztQRLc4AfyHMqy2nc8Mc2kwvC7tcqxEA==
            -----END AGE ENCRYPTED FILE-----
    lastmodified: "2023-11-19T15:46:59Z"
    mac: ENC[AES256_GCM,data:pZHj7i+BGJ2KLdsRGQ2KOKr4C5wqXx45Rn6xEUAwtLRUSWFkCnx3le68/OmIl29Vw8vhxYHZ6hbEZgKNvyLRTsInMzMw7Jk52o1zBk7kRo5WKC2+kN1pKkqOmtWTWrZIT4s1XhreDqvExp5jSUGt2zmKtMJYp9yVHqs03qxa7ro=,iv:0CLun8rEMOqu1LaqG45TagfU1ZmCTF6FDv6P6jJONZc=,tag:U9WsmSBxMUX2bF2SbM8ZiA==,type:str]
    pgp: []
    unencrypted_suffix
====

- charts/serverhb/secrets/credentials.encrypted.yaml
====
username: ENC[AES256_GCM,data:b5/WEiZ5ZxBK,iv:5bA2QAgEUOK/Om43hON6lqOi9ZAmEeY4L0nyq1RZK0Q=,tag:SMZryaQ9Xid3aXmTD+h/yw==,type:str]
password: ENC[AES256_GCM,data:PKwSgF5cdMbnRghjnjetJhMkRR2Z,iv:tj8tdyK3/na4/xl1BSQNGdNuRc/ZYR4crVHzi0/GfLQ=,tag:9bZYfAY/vJj2PsE9b95Nzg==,type:str]
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age:
        - recipient: age17mn84gj495r8a3dnsuh3zxctcyw884seldp8jtg7n7ywve8pzgcs9ucscg
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBQVkgwZEFuaCt0STBPZUU0
            clZRK3krQzFyVUFLaHRuUjlnNWNuc0ErUkdNCndOc3RiZ3RYZ3VsZjBKTjlzSGJH
            cTRCdkhBTksvblE3b3JtdjhDeFdUc3MKLS0tIHJLVXdtMmNQRmk0Ly9hVmJ6RWFk
            b25WMHlqVENGRHBRKzY4U3oxU3FxZncKRouTINtQdxsMEegkuz9r7+a25sFJQp2n
            yVhkLPDgmQxTV5GDizKIEq4JUy/3NTggvjYLRr9+YUyP5ss3NF+sWQ==
            -----END AGE ENCRYPTED FILE-----
    lastmodified: "2023-11-20T20:42:46Z"
    mac: ENC[AES256_GCM,data:uh29Fb3q/JMDUhsJBl0kfMnXxeemVVdCBdmEXR11X/Zno6YkULu53mNRcOfuaMqX3SyOCcb0WlxfzJnDkINDyKvqvXujf+pIq1VzIRbRHzoETRFMXmpO+SR2Jj4sLAR5xzS3JqGXcbgUX6qSdHLQQmupRGrwSa6yErDW6b6mQLM=,iv:j9gASGdwVgjkIbY9LOCPs/2+SL6h+rmW3u7634MdQzo=,tag:mzyIgRvi26ZyRKT7bnpDQg==,type:str]
    pgp: []
    unencrypted_suffix: _unencrypted
    version: 3.8.1
====

- charts/tlscert/secrets/keys.encrypted.yaml
====
tls_crt: ENC[AES256_GCM,data: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,iv:i5MnBpX5OV9hgwbIHqUvmGV0EB3IsHHs3RC6oVGuUg4=,tag:huE3Cc3mVxTB70n00RxAyg==,type:str]
tls_key: ENC[AES256_GCM,data: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,iv:Y0DrSWMKH0qdNAQO2DSXItdtZwJ5MaJdtodYRPhJVz0=,tag:4WPKbyjzVc7M2Hd7WBVZPA==,type:str]
sops:
    kms: []
    gcp_kms: []
    azure_kv: []
    hc_vault: []
    age:
        - recipient: age17mn84gj495r8a3dnsuh3zxctcyw884seldp8jtg7n7ywve8pzgcs9ucscg
          enc: |
            -----BEGIN AGE ENCRYPTED FILE-----
            YWdlLWVuY3J5cHRpb24ub3JnL3YxCi0+IFgyNTUxOSBGWC9hZG5CV3JaVjV1dEx5
            b3FxU3N5VGxjaWJXQ2ZxRVVPSHJmcTR2NlhVCjEzWW5KR2I1c0ovczJGa2hIdG9a
            QXZBc1BpWlczKytublZWTHJLYS9GQzgKLS0tIGhDb1lzQy9pdzJIZTlNT1JYR2Jp
            UHFHMFV5NFMyb2g2Q3htdVRYOXkwaE0KOy5/lgDVLmLqWPLxKfXIolpdfJAw4eQx
            jiUjkBHe//TRhLnoSCrxx+GRbRg2kvr8skEi7mUkIRM+bdnPAV1lqw==
            -----END AGE ENCRYPTED FILE-----
    lastmodified: "2023-11-19T17:50:09Z"
    mac: ENC[AES256_GCM,data:yIqfoB1LpZ5LLQiT2bhhEZMICvkt4y0H9q7FrYaCRyj1FpA0NW2VloElxhCDHGaqLxMuOdN6gOzbMfKeVv+a2yD9TNArdXn06FW3BDK7j9iGttSmJw24B0PYNfGtKyJyYaaeosGacLfXTBQmDDCLH9HI/y10M6OPGHwXZKjtAyw=,iv:Bmn7LwODsliJvs5VueewNW5o2GVIp/asfL6n33w6I3o=,tag:M971VhcDek6Blh7gKyVigg==,type:str]
    pgp: []
    unencrypted_suffix: _unencrypted
    version: 3.8.1
====


Deploying Helm Charts with Encrypted Values Files
------------------------------------------------------
The helm secrets plugin will:
  - dynamically decrypt the encrypted values file
  - creates NEW values file with the decrypted values (the file will be called: <encrypted-values-file-name>.dec)
  - makes the decrypted values file available to helm as normal
  - deletes the decrypted file after the chart is installed (or errored)


>> helm secrets upgrade --install my-certificate charts/tlscert \ 
-n test --create-namespace \
-f charts/tlscert/secrets/keys.encrypted.yaml
----
CONSOLE LOG ENTRIES
[helm-secrets] Decrypt: charts/tlscert/secrets/keys.encrypted.yaml
[helm-secrets] Removed: charts/tlscert/secrets/keys.encrypted.yaml.dec
----

>> helm secrets upgrade --install my-rabbitmq charts/rabbitmq \
-n test --create-namespace \
-f charts/rabbitmq/secrets/credentials.encrypted.yaml
----
CONSOLE LOG ENTRIES
[helm-secrets] Decrypt: charts/rabbitmq/secrets/credentials.encrypted.yaml
[helm-secrets] Removed: charts/rabbitmq/secrets/credentials.encrypted.yaml.dec
----


>> helm secrets upgrade --install my-serverhb charts/serverhb \
-n test --create-namespace \
-f charts/serverhb/secrets/credentials.encrypted.yaml
----
CONSOLE LOG ENTRIES
[helm-secrets] Decrypt: charts/serverhb/secrets/credentials.encrypted.yaml
[helm-secrets] Removed: charts/serverhb/secrets/credentials.encrypted.yaml.dec
----
